UEFA CHAMPIONS LEAGUE DRAW SIMULATOR
=====================================

Technical constraint satisfaction algorithm implementation for UEFA Champions League 2024-2025 format.

QUICK START
-----------
python3 champions_league_draw.py    # Run simulator
python3 test_draw.py                # Run tests
open draw_visualizer.html           # Web interface
make help                           # See all commands

PROJECT STRUCTURE
-----------------
Core:
  - champions_league_draw.py (321 lines) - Main algorithm
  - statistics.py (253 lines) - Analysis
  - export_json.py (92 lines) - JSON export
  - demo.py (156 lines) - Demo script

Web:
  - draw_visualizer.html (736 lines) - Modern UI
  - web_interface.html (631 lines) - Classic UI

Tests:
  - test_draw.py (257 lines) - 17 unit tests

Docs:
  - README.md - Main documentation
  - ARCHITECTURE.md - Technical details
  - CONTRIBUTING.md - How to contribute
  - GITHUB_SETUP.md - Publishing guide

DevOps:
  - Dockerfile, docker-compose.yml
  - .github/workflows/ci.yml - CI/CD
  - Makefile - Build automation

ALGORITHM
---------
Randomized constraint satisfaction with 5 simultaneous constraints:
1. Pot distribution (2 opponents/pot)
2. Home/away balance (4 each)
3. Country exclusion (same country can't play)
4. Country limitation (max 2 from same foreign country)
5. Uniqueness (no duplicates)

Success rate: >95% within 15000 attempts
Average time: 1-3 seconds

TECH STACK
----------
Python 3.8+ (stdlib only)
HTML5/CSS3/JavaScript
Docker
GitHub Actions

STATS
-----
Lines of code: ~3,500
Test coverage: ~95%
External dependencies: 0
Tests: 17 (all passing)

LICENSE
-------
MIT License - see LICENSE file
